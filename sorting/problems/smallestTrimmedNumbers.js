/*
https://leetcode.com/problems/query-kth-smallest-trimmed-number/description/
Type: Medium

You are given a 0-indexed array of strings nums, where each string is of equal length and consists of only digits.

You are also given a 0-indexed 2D integer array queries where queries[i] = [ki, trimi]. For each queries[i], you need to:

Trim each number in nums to its rightmost trimi digits.
Determine the index of the kith smallest trimmed number in nums. If two trimmed numbers are equal, the number with the lower index is considered to be smaller.
Reset each number in nums to its original length.
Return an array answer of the same length as queries, where answer[i] is the answer to the ith query.

Note:

To trim to the rightmost x digits means to keep removing the leftmost digit, until only x digits remain.
Strings in nums may contain leading zeros.

Example 1:
    Input: nums = ["102","473","251","814"], queries = [[1,1],[2,3],[4,2],[1,2]]
    Output: [2,2,1,0]
    Explanation:
    1. After trimming to the last digit, nums = ["2","3","1","4"]. The smallest number is 1 at index 2.
    2. Trimmed to the last 3 digits, nums is unchanged. The 2nd smallest number is 251 at index 2.
    3. Trimmed to the last 2 digits, nums = ["02","73","51","14"]. The 4th smallest number is 73.
    4. Trimmed to the last 2 digits, the smallest number is 2 at index 0.
    Note that the trimmed number "02" is evaluated as 2.

Example 2:
    Input: nums = ["24","37","96","04"], queries = [[2,1],[2,2]]
    Output: [3,0]
    Explanation:
    1. Trimmed to the last digit, nums = ["4","7","6","4"]. The 2nd smallest number is 4 at index 3.
    There are two occurrences of 4, but the one at index 0 is considered smaller than the one at index 3.
    2. Trimmed to the last 2 digits, nums is unchanged. The 2nd smallest number is 24.
 
Constraints:
 - 1 <= nums.length <= 100
 - 1 <= nums[i].length <= 100
 - nums[i] consists of only digits.
 - All nums[i].length are equal.
 - 1 <= queries.length <= 100
 - queries[i].length == 2
 - 1 <= ki <= nums.length
 - 1 <= trimi <= nums[i].length
 

Follow up: Could you use the Radix Sort Algorithm to solve this problem? What will be the complexity of that solution?

*/
/* 
Input: nums = ["102","473","251","814"], queries = [[1,1],[2,3],[4,2],[1,2]]
Output: [2,2,1,0]
["102","473","251","814"], query: [1,1]=> k=1, trim=1
=> trimed = ["2", "3", "1", "4"], kth, ie., 1st smalltest = "1" at index 2
sorted : ["1", "2", "3", "4"]
Input: nums = ["24","37","96","04"], queries = [[2,1],[2,2]]
Output: [3,0]
*/
/**
 * @param {string[]} nums
 * @param {number[][]} queries
 * @return {number[]}
 */
/*
Time limit exceeds for input


[[1,100],[2,100],[3,100],[4,100],[5,100],[6,100],[7,100],[8,100],[9,100],[10,100],[11,100],[12,100],[13,100],[14,100],[15,100],[16,100],[17,100],[18,100],[19,100],[20,100],[21,100],[22,100],[23,100],[24,100],[25,100],[26,100],[27,100],[28,100],[29,100],[30,100],[31,100],[32,100],[33,100],[34,100],[35,100],[36,100],[37,100],[38,100],[39,100],[40,100],[41,100],[42,100],[43,100],[44,100],[45,100],[46,100],[47,100],[48,100],[49,100],[50,100],[51,100],[52,100],[53,100],[54,100],[55,100],[56,100],[57,100],[58,100],[59,100],[60,100],[61,100],[62,100],[63,100],[64,100],[65,100],[66,100],[67,100],[68,100],[69,100],[70,100],[71,100],[72,100],[73,100],[74,100],[75,100],[76,100],[77,100],[78,100],[79,100],[80,100],[81,100],[82,100],[83,100],[84,100],[85,100],[86,100],[87,100],[88,100],[89,100],[90,100],[91,100],[92,100],[93,100],[94,100],[95,100],[96,100],[97,100],[98,100],[99,100],[100,100]]
*/
var smallestTrimmedNumbers = function (nums, queries) {
  const N = nums.length;
  function Node(value, index) {
    this.value = value;
    this.index = index;
  }
  let unsorted = new Array(N);
  //create node array with number and its index
  for (let i = 0; i < N; i++) {
    unsorted[i] = new Node(nums[i], i);
  }
  const LSDSort = (a, trim) => {
    const W = a[0].value.length;
    const N = a.length;
    const R = 9; //only digits
    const aux = new Array(N);
    // console.log(`trim: ${trim}, W: ${W}`);
    //for one by one for each digits
    for (let d = W - 1; d >= W - trim; d--) {
      console.log(`d: ${d}`);
      const counts = new Array(R + 1).fill(0);
      //1. count array for digit 'd'
      for (let i = 0; i < N; i++) {
        const digit = a[i].value.charAt(d) - "0";
        counts[digit + 1]++;
      }
      //2. Transform count to indices
      for (let r = 0; r < R; r++) {
        counts[r + 1] += counts[r];
      }
      //3. distribute the records
      for (let i = 0; i < N; i++) {
        const digit = a[i].value.charAt(d) - "0";
        aux[counts[digit]++] = a[i];
      }
      for (let i = 0; i < N; i++) {
        a[i] = aux[i];
      }
      console.log(`Array after sorting by digit ${d}:`, aux);
    }
    return aux;
  };

  const result = new Array(queries.length);
  let sorted = [];
  for (let i = 0; i < queries.length; i++) {
    const [k, d] = queries[i];
    console.log(`k: ${k}, d: ${d}`);
    sorted = LSDSort([...unsorted], d);
    //kth smallest
    result[i] = sorted[k - 1].index;
  }
  return result;
};

//Solution from user
/*
class Solution {
        public int[] smallestTrimmedNumbers(String[] nums, int[][] queries) {
        int[] solution = new int[queries.length];

        //1. Map the elements into an object so we can easily track which index a particular number belongs to
        Node[] unsorted = new Node[nums.length];
        for (int i = 0; i < nums.length; i++) {
            unsorted[i] = new Node(nums[i], i);
        }

        int digit = nums[0].length() - 1;
        int len = nums[0].length();

        int finished = 0;
        //2. Loop through all of the digits from the end to the start.
        while (digit >= 0 && finished < queries.length) {
            //3. perform counting sort on the current digit, this will sort the array up to the trimmed value
            unsorted = countingSort(unsorted, digit);
            int qIndex = 0;

            //4. find any queries whose trim value matches the digit we have currently sorted to
            for (int[] query : queries) {
                int trimi = query[1];
                int ki = query[0];
                //5. find the kith smallest value for the query and add it to the solution
                if (len - trimi == digit) {
                    solution[qIndex] = unsorted[ki - 1].index;
                    finished++;
                }
                qIndex++;
            }
            digit--;
        }

        return solution;
    }

    public Node[] countingSort(Node[] unsorted, int digit) {
        //Note. It is quite important that counting sort is stable so that this property is maintained
        //If two trimmed numbers are equal, the number with the lower index is considered to be smaller
        int[] buckets = new int[10];
        for (Node num : unsorted) {
            buckets[num.value.charAt(digit) - '0']++;
        }

        for (int i = 1; i < buckets.length; i++) {
            buckets[i] = buckets[i] + buckets[i - 1];
        }

        Node[] sorted = new Node[unsorted.length];
        for (int i = unsorted.length - 1; i >= 0; i--) {
            sorted[--buckets[unsorted[i].value.charAt(digit) - '0']] = unsorted[i];
        }

        return sorted;
    }

        private class Node {
        String value;
        int index;

        public Node(String value, int index) {
            this.index = index;
            this.value = value;
        }
    }
}
 */
